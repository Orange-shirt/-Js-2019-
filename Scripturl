dialogs_js();
/*⏬⏬⏬*/
var xiazai = ("软件下载链接戳 https://www.lanzous.com/i7sb57i");
var height = device.height;
var width = device.width;
setScreenMetrics(1080, 1920);

function dialogs_js() {
    log("软件脚本已开始运行，如果没有弹出菜单请强行停止再打开本软件！");
    var options_ = ["▶️ 开始运行脚本", "🕒 定时运行脚本", "⏹ 停止运行脚本", "🌐 向作者反馈问题", "💬 QQ分享给好友", "*️⃣ 脚本介绍&作者信息"]
    var i = dialogs.select("欢迎使用 (◍•ᴗ•◍)❤" + "\n" + "请选择一个要进行的选项", options_);
    if (i < 0) {
        toastLog("没有选择，如需关闭对话框\n  请选择“停止运行脚本”");
        dialogs_js();
    } else if (i == 0) {
        toastLog(options_[i]);
        Set_Back_way();
    } else if (i == 2) {
        toastLog(options_[i]);
        exit();
    } else if (i == 3) {
        toastLog(options_[i]);
        app.openUrl("https://wj.qq.com/s2/4847356/63d5");
        dialogs_js();
    } else if (i == 4) {
        toastLog(options_[i]);
        var content = ("嘿！分享一个好用的软件给你，它几乎可以完美代替双手完成“淘宝双十二全民寻宝”的任务并增加能量哦，该软件使用“Auto.js”制作，且作者开放了脚本代码，绝对安全可靠！快来下载试试看吧～" + xiazai);
        app.startActivity({
            action: "android.intent.action.SEND",
            type: "text/*",
            extras: {
                "android.intent.extra.TEXT": content
            },
            packageName: "com.tencent.mobileqq",
            className: "com.tencent.mobileqq.activity.JumpActivity"
        });
        dialogs_js();
    } else if (i == 5) {
        alert("“能量++” 1.0.0Beta\n脚本作者⊂((・▽・))⊃\n@橘衫下邂逅的时光", "(作者人很好的～😃)\n\n此脚本为兴趣制作\n仅供参考，严禁售卖\n\n如有任何问题，欢迎向作者反馈哦～");
        dialogs_js();
    } else if (i == 1) {
        toastLog("等待无障碍权限开启……\n您必须手动授予本软件无障碍权限\n否则本软件将无法工作！");
        sleep(3000);
        auto.waitFor();
        toastLog("无障碍权限已开启" + "\n" + "继续运行脚本……");
        sleep(3000);
        toastLog("为保证脚本正常运行\n请授予本软件悬浮窗权限");
        sleep(2000);
        var test_rawWindow = floaty.rawWindow(
            <frame gravity="center" bg="#00000000"/>
        );
        test_rawWindow.setSize(-1, -1);
        test_rawWindow.setTouchable(false);
        setTimeout(() => {
            test_rawWindow.close();
        }, 1000);
        toastLog("悬浮窗权限已开启！");
        sleep(2000);
        wait_Time_over();
    }
}

function Set_Back_way() {
    //💟🕎⛎设定返回方法及滑动速度的代码
    var options_hq = ["🔙 普通的返回\n(使用无障碍权限)", "#⃣ 使用ROOT返回\n(必须授予本软件ROOT权限)", "👉👉🏻👉🏼👉🏽👉🏾👉🏿 \n从屏幕中间从左向内滑动\n(全面屏手势返回 例如:小米MIUI)", "              👈🏿👈🏾👈🏽👈🏼👈🏻👈 \n从屏幕中间从右向内滑动\n(全面屏手势返回 例如:华为EMUI)", "👆👆🏻👆🏼👆🏽👆🏾👆🏿 \n从屏幕左侧下方向上滑动\n(全面屏手势返回 例如:锤子Smartisan UI)", "               ☝🏿☝🏾☝🏽☝🏼☝🏻☝️ \n从屏幕右侧下方向上滑动\n(全面屏手势返回)"]
    var i_back = dialogs.select(" Hi! ( ╹▽╹ )\n请选择一个方法\n用于实现返回操作", options_hq);
    if (i_back >= 0) {
        toastLog("您选择的是" + options_hq[i_back]);
        sleep(2000);
        var options_select = options_hq[i_back];
        context_i_back = i_back;
    } else {
        toastLog("没有选择返回方法！");
        dialogs_js();
    }
    if (i_back >= 2) {
        var options_hd = ["200毫秒\n(默认，如果太快请选其它)", "500毫秒", "800毫秒", "1秒(1000毫秒)", "1.5秒（1500毫秒）", "2秒（2000毫秒）"]
        var iix = dialogs.select("Ok! (・∀・) 您选择了:\n" + options_select + "\n请选择滑动速度\n单位:毫秒（1秒=1000毫秒）", options_hd);
    }
    if (iix == 0) {
        context_gestures_speed = 200;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 1) {
        context_gestures_speed = 500;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 2) {
        context_gestures_speed = 800;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 3) {
        context_gestures_speed = 1000;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 4) {
        context_gestures_speed = 1500;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 5) {
        context_gestures_speed = 2000;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix < 0) {
        toastLog("没有选择滑动速度");
        exit();
    }
}
sleep(1000);
toastLog("等待无障碍权限开启……\n您必须手动授予本软件无障碍权限\n否则本软件将无法工作！");
auto.waitFor();
toastLog("无障碍权限已开启" + "\n" + "继续运行脚本……");
sleep(2000);

function wait_Time_over() {
    var i_wait = dialogs.singleChoice("🕗 定时运行\n\n(＾∇＾)ﾉ♪\n请选择一个选项\n计时结束会自动运行", ["1分钟后运行", "5分钟后运行", "10分钟后运行", "30分钟后运行", "一小时后运行", "两小时后运行", "三小时后运行", "五小时后运行", "八小时后运行"], 2);
    if (i_wait < 0) {
        toast("您取消了选择");
        dialogs_js();
    }
    if (i_wait >= 0) {
        context_i_wait = i_wait;
    }
    if (i_wait == 0) {
        var choice_confirm = dialogs.confirm("您选择了1分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 1) {
        var choice_confirm = dialogs.confirm("您选择了5分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 2) {
        var choice_confirm = dialogs.confirm("您选择了10分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 3) {
        var choice_confirm = dialogs.confirm("您选择了30分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 4) {
        var choice_confirm = dialogs.confirm("您选择了一小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 5) {
        var choice_confirm = dialogs.confirm("您选择了两小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 6) {
        var choice_confirm = dialogs.confirm("您选择了三小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 7) {
        var choice_confirm = dialogs.confirm("您选择了五小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 8) {
        var choice_confirm = dialogs.confirm("您选择了八小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
}

function waiting_time() {
    //计时运行脚本
    if (context_i_wait == 0) {
        var Seconds = 60;
        for (Seconds == 60; Seconds > 0; Seconds--) {
            console.warn("【定时运行】计时中……\n" + Seconds + "秒后开始运行");
            sleep(1000);
        }
    }
    if (context_i_wait == 1) {
        var Minutes = 4;
        for (Minutes == 4; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 2) {
        var Minutes = 9;
        for (Minutes == 9; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 3) {
        var Minutes = 29;
        for (Minutes == 29; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 4) {
        var Minutes = 59;
        for (Minutes == 59; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 5) {
        var Hours = 1;
        for (Hours == 1; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
    if (context_i_wait == 6) {
        var Hours = 2;
        for (Hours == 2; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
    if (context_i_wait == 7) {
        var Hours = 4;
        for (Hours == 4; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
    if (context_i_wait == 8) {
        var Hours = 7;
        for (Hours == 7; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
}

//下面是悬浮窗
var window = floaty.window(
    <frame>
        <button id="action" text="点击停止脚本" w="120" h="40" bg="#F0EB4336"/>
    </frame>
);
setInterval(() => {}, 1000);
var execution = null;
//记录按键被按下时的触摸坐标
var x = 0,
    y = 0;
//记录按键被按下时的悬浮窗位置
var windowX, windowY;
//记录按键被按下的时间以便判断长按等动作
var downTime;
window.action.setOnTouchListener(function(view, event) {
    switch (event.getAction()) {
        case event.ACTION_DOWN:
            x = event.getRawX();
            y = event.getRawY();
            windowX = window.getX();
            windowY = window.getY();
            downTime = new Date().getTime();
            return true;
        case event.ACTION_MOVE:
            //移动手指时调整悬浮窗位置
            window.setPosition(windowX + (event.getRawX() - x),
                windowY + (event.getRawY() - y));
            //如果按下的时间超过1.5秒判断为长按，退出脚本
            if (new Date().getTime() - downTime > 1500) {
                toast("长按可以移动位置哦～");
            }
            return true;
        case event.ACTION_UP:
            //手指弹起时如果偏移很小则判断为点击
            if (Math.abs(event.getRawY() - y) < 5 && Math.abs(event.getRawX() - x) < 5) {
                onClick();
            }
            return true;
    }
    return true;
});

function onClick() {
    dialogs.alert("已停止运行脚本！");
    log("用户点击了停止按钮");
    engines.stopAllAndToast();
}

currentActivity();
openTBandsearch();

function openTBandsearch() {
    sleep(1000);
    app.startActivity({
        packageName: "com.taobao.taobao",
        className: "com.taobao.search.searchdoor.SearchDoorActivity"
    });
    toastLog("若长时间没有打开淘宝\n请自行打开淘宝至搜索界面！");
    waitForActivity("com.taobao.search.searchdoor.SearchDoorActivity");
    sleep(1000);
    setText("双十二全民寻宝");
    if (text("搜索").exists()) {
        text("搜索").findOne().click();
    }
}
jinhuodong();

function jinhuodong() {
    sleep(3000);
    var refresh = 1;
    if (text("重新加载").exists()) {
        text("重新加载").findOne().click();
        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
        refresh++;
        sleep(5000);
        if (text("重新加载").exists()) {
            text("重新加载").findOne().click();
            toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
            refresh++;
            sleep(5000);
            if (text("重新加载").exists()) {
                text("重新加载").findOne().click();
                toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                refresh++;
                sleep(5000);
                if (text("重新加载").exists()) {
                    text("重新加载").findOne().click();
                    toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                    refresh++;
                    sleep(5000);
                    if (text("重新加载").exists()) {
                        text("重新加载").findOne().click();
                        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                        sleep(5000);
                        if (text("重新加载").exists()) {
                            dialogs.alert("(●´⌓`●)\n已经刷新5次了还是未能进入活动页面\n请检查网络后再重新运行脚本吧～");
                            exit();
                        }
                    }
                }
            }
        }
    }
    if (text("刷新重试").exists()) {
        text("刷新重试").findOne().click();
        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
        refresh++;
        sleep(5000);
        if (text("刷新重试").exists()) {
            text("刷新重试").findOne().click();
            toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
            refresh++;
            sleep(5000);
            if (text("刷新重试").exists()) {
                text("刷新重试").findOne().click();
                toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                refresh++;
                sleep(5000);
                if (text("刷新重试").exists()) {
                    text("刷新重试").findOne().click();
                    toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                    refresh++;
                    sleep(5000);
                    if (text("刷新重试").exists()) {
                        text("刷新重试").findOne().click();
                        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                        sleep(5000);
                        if (text("刷新重试").exists()) {
                            dialogs.alert("(˘･_･˘)\n已经刷新5次了还是未能进入活动页面，可能是网络问题也有是淘宝出现了BUG，建议您关掉淘宝后再重新运行脚本吧～");
                            exit();
                        }
                    }
                }
            }
        }
    }
    var dengdai10s = 10;
    for (dengdai10s == 10; dengdai10s > 0; dengdai10s--) {
        toastLog("正在等待活动界面加载\n剩余" + dengdai10s + "秒……");
        sleep(1000);
    }
}
click_powerˉqiandao();

function click_powerˉqiandao() {
    toastLog("正在找图，不要急哦");
    var img = images.load("https://s2.ax1x.com/2019/12/02/QnNQ10.png");
    var templ = images.load("https://s2.ax1x.com/2019/12/02/QnU38I.png");
    var p = findImage(img, templ);
    if (p) {
        toastLog("找到了“充能量”图片\n坐标为" + p);
        sleep(2000);
        click(p.x+100, p.y);
    } else {
        toast("没找到“充能量”图片");
        //哎～有些机型它不适用这个点击。
        click(955, 1600);
    }
    sleep(3000);
    if (text("去签到").exists()) {
        text("去签到").findOne().click();
    }
}
main_js_clickAll15s();

function Justback() {
    //💝💝💝💝💝使用用户设定的返回方法
    if (context_i_back == 0) {
        sleep(1000);
        toastLog("使用普通的返回");
        back();
        sleep(2000);
    }
    if (context_i_back == 1) {
        sleep(1000);
        toastLog("使用ROOT返回\n请确保已给ROOT权限！");
        Back();
        sleep(2000);
    }
    if (context_i_back == 2) {
        sleep(1000);
        toastLog("从屏幕中间向从左向内滑动来返回");
        gestures([context_gestures_speed, [0, height / 2],
            [500, height / 2]
        ]);
        sleep(2000);
    }
    if (context_i_back == 4) {
        sleep(1000);
        toastLog("从屏幕左侧下方向上滑动来返回");
        gestures([context_gestures_speed, [width / 2 - 300, height - 1],
            [width / 2 - 300, height - 500]
        ]);
        sleep(2000);
    }
    if (context_i_back == 3) {
        sleep(1000);
        toastLog("从屏幕中间向从右向内滑动来返回");
        gestures([context_gestures_speed, [width - 1, height / 2],
            [width - 500, height / 2]
        ]);
        sleep(2000);
    }
    if (context_i_back == 5) {
        sleep(1000);
        toastLog("从屏幕左侧下面向上面滑动来返回");
        gestures([context_gestures_speed, [width / 2 + 300, height - 1],
            [width / 2 + 300, height - 500]
        ]);
        sleep(2000);
    }
}

function main_js_clickAll15s() {
    if (text("去签到").exists()) {
        text("去签到").findOne().click();
        sleep(2000);
    }
    while (textContains("去浏览").exists()) {
        textContains("去浏览").findOne().click();
        var dengdai10s = 10;
        for (dengdai10s == 10; dengdai10s > 0; dengdai10s--) {
            toastLog("正在完成“去浏览”任务\n剩余" + dengdai10s + "秒……")
            sleep(2000);
            swipe(width / 2, height - 600, width / 2, 0, 500);
        }
        if (currentActivity() == "com.taobao.tao.TBMainActivity") {
            app.startActivity({
                packageName: "com.taobao.taobao",
                className: "com.taobao.search.searchdoor.SearchDoorActivity"
            });
            toastLog("若长时间没有打开淘宝搜索\n请自行打开淘宝至搜索界面！");
            waitForActivity("com.taobao.search.searchdoor.SearchDoorActivity");
            sleep(1000);
            setText("双十二全民寻宝");
            if (text("搜索").exists()) {
                text("搜索").findOne().click();
            }
            jinhuodong();
            click_powerˉqiandao();
        } else {
            Justback();
        }
    }
    while (textContains("去搜索").exists()) {
        textContains("去搜索").findOne().click();
        var dengdai10s = 10;
        for (dengdai10s == 10; dengdai10s > 0; dengdai10s--) {
            toastLog("正在完成“去浏览”任务\n剩余" + dengdai10s + "秒……")
            sleep(2000);
            swipe(width / 2, height - 600, width / 2, 0, 500);
        }
        Justback();
    }
}

dialogs.alert("(☞ﾟ∀ﾟ)☞\n(☞^o^) ☞     脚本已运行完毕\n(☞ ͡° ͜ʖ ͡°)☞    赶快去掷骰子吧", "检测不到任务喽～\n如有遗漏请自行操作或再次运行\n如有任何问题欢迎向作者反馈哦～\n\n脚本作者@橘衫下邂逅的时光");
exit();
