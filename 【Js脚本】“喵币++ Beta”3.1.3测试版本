dialogs_js();

function dialogs_js() {
    log("软件脚本已开始运行，如果没有弹出菜单请强行停止再打开本软件！");
    var options_ = ["▶️ 开始运行脚本", "🕒 定时运行脚本", "⏹ 停止运行脚本", "🌐 向作者反馈问题", "💬 QQ分享给好友", "*️⃣ 脚本介绍&作者信息"]
    var i = dialogs.select("欢迎使用 (◍•ᴗ•◍)❤" + "\n" + "请选择一个要进行的选项", options_);
    if (i < 0) {
        toastLog("没有选择");
        dialogs_js();
    } else if (i == 0) {
        toastLog(options_[i]);        
        Set_Back_way();
    } else if (i == 2) {
        toastLog(options_[i]);
        exit();
    } else if (i == 3) {
        toastLog(options_[i]);
        app.openUrl("https://wj.qq.com/s2/4847356/63d5");
        dialogs_js();
    } else if (i == 4) {
        var xiazai = ("下载链接戳https://dwz.cn/uWVygsE6");
        toastLog(options_[i]);
        var content = ("嘿！分享一个好用的软件给你，它几乎可以完美代替双手完成“淘宝双十一开喵铺”的任务哦，该软件基于“Auto.js”制作，且作者开放了脚本代码！软件离线运行安全可靠！快来下载试试看吧～" + xiazai);
        app.startActivity({
            action: "android.intent.action.SEND",
            type: "text/*",
            extras: {
                "android.intent.extra.TEXT": content
            },
            packageName: "com.tencent.mobileqq",
            className: "com.tencent.mobileqq.activity.JumpActivity"
        });
        dialogs_js();
    } else if (i == 5) {
        alert("喵币++ 3.1.2Beta\n脚本作者⊂((・▽・))⊃\n@橘衫下邂逅的时光", "(作者人很好的～😃)\n\n\n小部分代码参考了\n@暗夜协奏者 的脚本代码\n感谢人家优秀的代码啦～(*^_^*)\n\n此脚本为兴趣制作\n仅供参考，严禁售卖");
        dialogs_js();
    } else if (i == 1) {        
        toastLog("等待无障碍权限开启……\n您必须手动授予本软件无障碍权限\n否则本软件将无法工作！");
        sleep(3000);
        auto.waitFor();
        toastLog("无障碍权限已开启" + "\n" + "继续运行脚本……");
        sleep(3000);
        toastLog("为保证脚本正常运行\n请授予本软件悬浮窗权限");
        sleep(2000);
        var test_rawWindow = floaty.rawWindow(
            <frame gravity="center" bg="#00000000"/>
        );
        test_rawWindow.setSize(-1, -1);
        test_rawWindow.setTouchable(false);
        setTimeout(() => {
            test_rawWindow.close();
        }, 1000);
        toastLog("悬浮窗权限已开启！");
        sleep(2000);
        wait_Time_over();
    }
}
       sleep(2000);
        toastLog("等待无障碍权限开启……\n您必须手动授予本软件无障碍权限\n否则本软件将无法工作！");
        auto.waitFor();
        toastLog("无障碍权限已开启" + "\n" + "继续运行脚本……");
        sleep(1000);

function Set_Back_way() {
    //💟🕎⛎设定返回方法及滑动速度的代码
    var options_hq = ["🔙 普通的返回\n(使用无障碍权限)", "#⃣ 使用ROOT返回\n(必须授予本软件ROOT权限)", "👉👉🏻👉🏼👉🏽👉🏾👉🏿 \n从屏幕中间从左向内滑动\n(全面屏手势返回 例如:小米MIUI)", "              👈🏿👈🏾👈🏽👈🏼👈🏻👈 \n从屏幕中间从右向内滑动\n(全面屏手势返回 例如:华为EMUI)", "👆👆🏻👆🏼👆🏽👆🏾👆🏿 \n从屏幕左侧下方向上滑动\n(全面屏手势返回 例如:锤子Smartisan UI)", "               ☝🏿☝🏾☝🏽☝🏼☝🏻☝️ \n从屏幕右侧下方向上滑动\n(全面屏手势返回)"]
    var i_back = dialogs.select(" Hi! ( ╹▽╹ )\n请选择一个方法\n用于实现返回操作", options_hq);
    if (i_back >= 0) {
        toastLog("您选择的是" + options_hq[i_back]);
        sleep(2000);
        var options_select = options_hq[i_back];
        context_i_back = i_back;
    } else {
        toastLog("没有选择返回方法！");
        dialogs_js();
    }
    if (i_back >= 2) {
        var options_hd = ["200毫秒\n(默认，如果太快请选其它)", "500毫秒", "800毫秒", "1秒(1000毫秒)", "1.5秒（1500毫秒）", "2秒（2000毫秒）"]
        var iix = dialogs.select("Ok! (・∀・) 您选择了:\n" + options_select + "\n请选择滑动速度\n单位:毫秒（1秒=1000毫秒）", options_hd);
    }
    if (iix == 0) {
        context_gestures_speed = 200;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 1) {
        context_gestures_speed = 500;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 2) {
        context_gestures_speed = 800;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 3) {
        context_gestures_speed = 1000;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 4) {
        context_gestures_speed = 1500;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix == 5) {
        context_gestures_speed = 2000;
        toastLog("滑动速度设定为\n" + context_gestures_speed + "毫秒");
        sleep(2000);
    }
    if (iix < 0) {
        toastLog("没有选择滑动速度");
        exit();
    }
}

function wait_Time_over() {
    var i_wait = dialogs.singleChoice("🕗 定时运行\n\n(＾∇＾)ﾉ♪\n请选择一个选项\n计时结束会自动运行", ["1分钟后运行", "5分钟后运行", "10分钟后运行", "30分钟后运行", "一小时后运行", "两小时后运行", "三小时后运行", "五小时后运行", "八小时后运行"], 2);
    if (i_wait < 0) {
        toast("您取消了选择");
        dialogs_js();
    }
    if (i_wait >= 0) {
        context_i_wait = i_wait;
    }
    if (i_wait == 0) {
        var choice_confirm = dialogs.confirm("您选择了1分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 1) {
        var choice_confirm = dialogs.confirm("您选择了5分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 2) {
        var choice_confirm = dialogs.confirm("您选择了10分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 3) {
        var choice_confirm = dialogs.confirm("您选择了30分钟后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 4) {
        var choice_confirm = dialogs.confirm("您选择了一小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 5) {
        var choice_confirm = dialogs.confirm("您选择了两小时后运行","点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 6) {
        var choice_confirm = dialogs.confirm("您选择了三小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 7) {
        var choice_confirm = dialogs.confirm("您选择了五小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
    if (i_wait == 8) {
        var choice_confirm = dialogs.confirm("您选择了八小时后运行", "点击确定进行一次设定返回操作的方法后，脚本将在您设定的时间结束后开始自动运行\n请不要清理本软件的后台或者锁屏手机等，否则可能会造成定时任务失效");
        if (choice_confirm == false) {
            toastLog("取消了定时运行确认");
            wait_Time_over();
        } else {
            Set_Back_way();
            waiting_time();
        }
    }
}

function waiting_time() {
    //计时运行脚本
    if (context_i_wait == 0) {
        var Seconds = 60;
        for (Seconds == 60; Seconds > 0; Seconds--) {
            console.warn("【定时运行】计时中……\n" + Seconds + "秒后开始运行");
            sleep(1000);
        }
    }
    if (context_i_wait == 1) {
        var Minutes = 4;
        for (Minutes == 4; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 2) {
        var Minutes = 9;
        for (Minutes == 9; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 3) {
        var Minutes = 29;
        for (Minutes == 29; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 4) {
        var Minutes = 59;
        for (Minutes == 59; Minutes >= 0; Minutes--) {
            if (Minutes >= 0) {
                var Seconds = 60;
                for (Seconds == 60; Seconds > 0; Seconds--) {
                    console.warn("【定时运行】计时中……\n" + Minutes + "分钟" + Seconds + "秒后开始运行");
                    sleep(1000);
                }
            }
        }
    }
    if (context_i_wait == 5) {
        var Hours = 1;
        for (Hours == 1; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
    if (context_i_wait == 6) {
        var Hours = 2;
        for (Hours == 2; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
    if (context_i_wait == 7) {
        var Hours = 4;
        for (Hours == 4; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
    if (context_i_wait == 8) {
        var Hours = 7;
        for (Hours == 7; Hours >= 0; Hours--) {
            var Minutes = 59;
            for (Minutes == 59; Minutes >= 0; Minutes--) {
                if (Minutes >= 0) {
                    var Seconds = 60;
                    for (Seconds == 60; Seconds > 0; Seconds--) {
                        console.warn("【定时运行】计时中……\n" + Hours + "小时" + Minutes + "分钟" + Seconds + "秒后开始运行");
                        sleep(1000);
                    }
                }
            }
        }
    }
}
//下面是悬浮窗
var window = floaty.window(
    <frame>
        <button id="action" text="点击停止脚本" w="120" h="40" bg="#F0EB4336"/>
    </frame>
);
setInterval(() => {}, 1000);
var execution = null;
//记录按键被按下时的触摸坐标
var x = 0,
    y = 0;
//记录按键被按下时的悬浮窗位置
var windowX, windowY;
//记录按键被按下的时间以便判断长按等动作
var downTime;
window.action.setOnTouchListener(function(view, event) {
    switch (event.getAction()) {
        case event.ACTION_DOWN:
            x = event.getRawX();
            y = event.getRawY();
            windowX = window.getX();
            windowY = window.getY();
            downTime = new Date().getTime();
            return true;
        case event.ACTION_MOVE:
            //移动手指时调整悬浮窗位置
            window.setPosition(windowX + (event.getRawX() - x),
                windowY + (event.getRawY() - y));
            //如果按下的时间超过1.5秒判断为长按，退出脚本
            if (new Date().getTime() - downTime > 1500) {
                toast("长按可以移动位置哦～");
            }
            return true;
        case event.ACTION_UP:
            //手指弹起时如果偏移很小则判断为点击
            if (Math.abs(event.getRawY() - y) < 5 && Math.abs(event.getRawX() - x) < 5) {
                onClick();
            }
            return true;
    }
    return true;
});

function onClick() {
    dialogs.alert("已停止运行脚本！");
    log("用户点击了停止按钮");
    engines.stopAllAndToast();
}

/*❌❌❌❌❌❌为了更快的打开淘宝这些代码不要了
app.openAppSetting("com.taobao.taobao");
if(app.openAppSetting("com.taobao.taobao")){
    toastLog("脚本打开手机淘宝设置页面失败！");
    sleep(2000);
    }

var deng_AppSetting = 20;
for (deng_AppSetting == 20; deng_AppSetting > 0; deng_AppSetting--) {
    sleep(1000);
    toastLog("请先手动强行停止手机淘宝\n" + deng_AppSetting + "秒后将打开手机淘宝……\n不强行停止可以继续运行，但可能会有问题！");
}
*/

var height = device.height;
var width = device.width;

/*
❌❌❌❌❌不强行停止淘宝了
function StopTB() {
    if (app.openAppSetting("com.taobao.taobao") == false) {
        dialogs.alert("❎错误！您的设备\n好像没有安装淘宝啊？！", "此脚本是为淘宝所设计的，如需使用请下载最新版本的手机淘宝APP再来运行本脚本吧～");
        engines.stopAllAndToast();
    }
    if (text("手机淘宝").exists()) {
        toast("检测到“手机淘宝”设置页\n即将尝试自动停止");
        sleep(2000);
        if (text("强行停止").exists()) {
            text("强行停止").findOne().click();
            sleep(2000);
            if (text("确定").exists()) {
                text("确定").findOne().click();
                sleep(2000);
            } else {
                var deng_AppSetting = 20;
                for (deng_AppSetting == 20; deng_AppSetting > 0; deng_AppSetting--) {
                    sleep(1000);
                    toastLog("请先手动强行停止手机淘宝\n" + deng_AppSetting + "秒后将打开手机淘宝……");
                }
            }
        } else {
            var deng_AppSetting = 20;
            for (deng_AppSetting == 20; deng_AppSetting > 0; deng_AppSetting--) {
                sleep(1000);
                toastLog("请先手动强行停止手机淘宝\n" + deng_AppSetting + "秒后将打开手机淘宝……");
            }
        }
    } else {
        var deng_AppSetting = 20;
        for (deng_AppSetting == 20; deng_AppSetting > 0; deng_AppSetting--) {
            sleep(1000);
            toastLog("请先手动强行停止手机淘宝\n" + deng_AppSetting + "秒后将打开手机淘宝……");
        }
    }
}
*/
/*这里统一设定点击坐标
这里的点都是经过测试得出来的。由于后面换了思路用不着了，但考虑到有些手机可能找不到文字点暂且留着
if (width==1080,height==1920){
    var x1=600; var y1=1235;
     var x2=547; var y2=1264;
      var x3=911; var y3=1716;
       var x4=996; var y4=456;
       setScreenMetrics(width,height);
    toastLog("您的设备分辨率为"+"\n"+height+"*"+width+"\n"+"脚本已开始运行！！"+"\n"+"运行期间请不要操作！！！");
    sleep(2000);
    }
    else if(width==1080,height==2340){
            var x1=820; var y1=1310;
             var x2=538; var y2=1205;
              var x3=924; var y3=1717;
               var x4=1004; var y4=565;
               setScreenMetrics(width,height);
          toastLog("您的设备分辨率为"+"\n"+height+"*"+width+"\n"+"脚本已开始运行！！"+"\n"+"运行期间请不要操作！！！");
          sleep(2000);
        }
        else if(width==1080,height==2160){
                var x1=767; var y1=1287;
                 var x2=572; var y2=1240;
                  var x3=930; var y3=1693;
                   var x4=1001; var y4=409;
                   setScreenMetrics(width,height);
              toastLog("您的设备分辨率为"+"\n"+height+"*"+width+"\n"+"脚本已开始运行！！"+"\n"+"运行期间请不要操作！！！");
              sleep(2000);
            }
         else{
            //默认设定点击坐标为1920*1080分辨率上经过测试的数值
                var x1=600; var y1=1235;
                 var x2=547; var y2=1264;
                  var x3=911; var y3=1716;
                   var x4=996; var y4=456;
                   setScreenMetrics(width,height);
              toastLog("您的设备分辨率为"+"\n"+height+"*"+width+"\n"+"脚本已开始运行！！"+"\n"+"运行期间请不要操作！！！");
              sleep(2000);   
            }       
           */
currentActivity();

function openTBandsearch() {
    sleep(1000);
    app.startActivity({
        packageName: "com.taobao.taobao",
        className: "com.taobao.search.searchdoor.SearchDoorActivity"
    });
    toastLog("若长时间没有打开淘宝\n请自行打开淘宝至搜索界面！");
    waitForActivity("com.taobao.search.searchdoor.SearchDoorActivity");
    sleep(1000);
    setText("双十一合伙人");
    if (text("搜索").exists()) {
        text("搜索").findOne().click();
    }
    /*❌❌❌❌❌
    launch("com.taobao.taobao");
    if(launch("com.taobao.taobao")==false){
        toastLog("第一种方法启动手机淘宝失败！\n即将使用第二种方法重新启动淘宝");
        sleep(2000);
        launchApp("手机淘宝");
        if(launchApp("手机淘宝")==false){
            toastLog("第二种方法启动手机淘宝失败！\n即将使用第三种方法重新启动淘宝");
            sleep(2000);
            app.launchPackage("com.taobao.taobao");
            if(app.launchPackage("com.taobao.taobao")){
                toastLog("第三种方法启动手机淘宝失败！\n没办法…您还是手动启动吧…");
                sleep(2000);
                }
            }
        }
        */
    /*
    ❌❌❌❌❌有人反馈明明有淘宝还有这个错误，所以这里不检测了
    if (launch("com.taobao.taobao") == false) {
        dialogs.alert("❎错误！您的设备\n好像没有安装淘宝啊？！", "此脚本是为淘宝所设计的，如需使用请下载最新版本的手机淘宝APP再来运行本脚本吧～");
        engines.stopAllAndToast();
    }*/
    /*
    不再用这种waitFor……的代码了，因为会一直等下去
    waitForActivity("com.taobao.tao.TBMainActivity");
    */
    /*
        var deng_TbApp = 10;
        for (deng_TbApp == 10; deng_TbApp > 0; deng_TbApp--) {
            toastLog("正在等待淘宝主界面打开\n剩余" + deng_TbApp + "秒……\n若已处于淘宝请返回淘宝主界面");
            sleep(2000);
        }*/
    /*❌❌❌❌❌❌❌
        if (currentActivity() == "com.taobao.tao.TBMainActivity") {
            sleep(2000);
            if (text("立即登录").exists()) {
                dialogs.alert("Ops(･o･;) \n您似乎没有登录淘宝账号哦！", "未登录淘宝账号的情况下脚本将不能正常运行，请登录淘宝之后再重新运行本脚本吧");
                engines.stopAllAndToast();
            }

            var check_jishi = 5;
            for (check_jishi == 5; check_jishi > 0; check_jishi--) {
                toastLog("即将搜索进入活动,请检查淘宝主界面" + "\n" + "若屏幕上有弹窗请关闭\n即将继续，剩余" + check_jishi + "秒");
                sleep(2000);
            }
        } else {
            dialogs.alert("检测到当前不是淘宝主界面", "若您在计时结束前已处于淘宝主界面但仍然看到此提示，您可以尝试重新运行脚本或者重启手机再试试\n点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity() + "\n反馈时请截图此对话框");
            engines.stopAllAndToast();
        }*/


    /*❌❌❌❌❌className("android.view.View").desc("搜索").clickable(true).findOne().click();
    sleep(2000);
    /*这几行代码在搜索框内设定文字并自动搜索进入，但一弄成App就用不了了。。。
    id("searchEdit").waitFor()
    id("searchEdit").findOne().setText("双十一合伙人")
    id("searchbtn").findOne().click()
    */
    /*setClip("双十一合伙人");
    var deng_clip = 5;
    for (deng_clip == 5; deng_clip > 0; deng_clip--) {
        sleep(1000);
        toastLog("请等待" + deng_clip + "秒……\n因为有的设备会安装有Fv悬浮球会有5秒的弹窗");
    }
    setText(getClip());
    sleep(1000);
    if (text("搜索").exists()) {
        text("搜索").findOne().click();
    }*/
}

function jinhuodong() {
    sleep(3000);
    /*
    if (currentActivity() == "com.taobao.browser.BrowserActivity") {
        toastLog("检测到正确的Activity,继续运行……");
    } else {
        var deng_rightActivity = 10;
        for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
            toastLog("jinhuodong():\n检测不到对的Activityn等待" + deng_rightActivity + "秒后将重新检测……\n不要动手机！当前Activity\n" + currentActivity());
            sleep(2000);
        }
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            dialogs.alert("ヽ((◎д◎))ゝ\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n\n导致错误的Activity↓\n" + currentActivity());
            engines.stopAllAndToast();
        }
    }
    */

    var deng = 10;
    for (deng == 10; deng > 0; deng--) {
        toastLog("正在等待加载活动" + "\n" + "剩余" + deng + "秒……");
        sleep(1000);
    }

    var refresh = 1;
    if (text("重新加载").exists()) {
        text("重新加载").findOne().click();
        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
        refresh++;
        sleep(5000);
        if (text("重新加载").exists()) {
            text("重新加载").findOne().click();
            toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
            refresh++;
            sleep(5000);
            if (text("重新加载").exists()) {
                text("重新加载").findOne().click();
                toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                refresh++;
                sleep(5000);
                if (text("重新加载").exists()) {
                    text("重新加载").findOne().click();
                    toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                    refresh++;
                    sleep(5000);
                    if (text("重新加载").exists()) {
                        text("重新加载").findOne().click();
                        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                        sleep(5000);
                        if (text("重新加载").exists()) {
                            dialogs.alert("(●´⌓`●)\n已经刷新5次了还是未能进入活动页面\n请检查网络后再重新运行脚本吧～");
                            exit();
                        }
                    }
                }
            }
        }
    }
    if (text("刷新重试").exists()) {
        text("刷新重试").findOne().click();
        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
        refresh++;
        sleep(5000);
        if (text("刷新重试").exists()) {
            text("刷新重试").findOne().click();
            toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
            refresh++;
            sleep(5000);
            if (text("刷新重试").exists()) {
                text("刷新重试").findOne().click();
                toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                refresh++;
                sleep(5000);
                if (text("刷新重试").exists()) {
                    text("刷新重试").findOne().click();
                    toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                    refresh++;
                    sleep(5000);
                    if (text("刷新重试").exists()) {
                        text("刷新重试").findOne().click();
                        toastLog("可能是您的网络问题" + "\n" + "正在刷新重试……" + "\n" + "这是第" + refresh + "次刷新");
                        sleep(5000);
                        if (text("刷新重试").exists()) {
                            dialogs.alert("(˘･_･˘)\n已经刷新5次了还是未能进入活动页面，可能是网络问题也有是淘宝出现了BUG，建议您关掉淘宝后再重新运行脚本吧～");
                            exit();
                        }
                    }
                }
            }
        }
    }
}

function click_mp() {
    if (text("开心收下").exists()) {
        text("开心收下").findOne().click();
        sleep(1000);
    }
    if (text("翻倍领取").exists()) {
        text("翻倍领取").findOne().click();
        var deng_zhibo = 10;
        for (deng_zhibo == 10; deng_zhibo > 0; deng_zhibo--) {
            toastLog("点击翻倍领取会进入直播页\n请等待" + deng_zhibo + "秒");
            sleep(2000);
        }
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }
    } else if (text("直接收下").exists()) {
        text("直接收下").findOne().click();
        sleep(1000);
    }
    if (text("店长店长，我可以喊多少人帮我盖楼？").exists()) {
        text("想喊多少喊多少").findOne().click();
        sleep(1000);
    }


    sleep(2000);
    if (textContains("升级喵铺").exists()) {
        var O = textContains("升级喵铺").findOne().bounds()
        click(O.centerX(), O.centerY() - 400);
    }
    sleep(3000);
    /*❌❌❌❌❌不再进行Activity检测！
    if (currentActivity() == "com.taobao.browser.BrowserActivity") {
        toastLog("检测到正确的Activity,继续运行……");
    } else {
        var deng_rightActivity = 10;
        for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
            toastLog("click_mp():\n检测不到对的Activity\n等待" + deng_rightActivity + "秒后重新检测……\n当前Activity\n" + currentActivity());
            sleep(2000);
        }
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            dialogs.alert("(๑•﹏•)\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity\n" + currentActivity() + "\n反馈时请截图此对话框");
            engines.stopAllAndToast();
        }
    }*/

    toastLog("检测文字中……\nSearch text……");
    sleep(2000);
    if (text("收下去盖楼").exists()) {
        text("收下去盖楼").findOne().click();
        var deng_duiwu = 10;
        for (deng_duiwu == 10; deng_duiwu > 0; deng_duiwu--) {
            toastLog("等待加载队伍\n（盖楼大挑战）……\n剩余" + deng_duiwu + "秒");
            sleep(1000);
        } //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }

    }
    if (text("开心收下").exists()) {
        text("开心收下").findOne().click();
        sleep(1000);
    }
    if (text("翻倍领取").exists()) {
        text("翻倍领取").findOne().click();
        var deng_zhibo = 10;
        for (deng_zhibo == 10; deng_zhibo > 0; deng_zhibo--) {
            toastLog("点击翻倍领取会进入直播页\n请等待" + deng_zhibo + "秒");
            sleep(2000);
        }
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }
    } else if (text("直接收下").exists()) {
        text("直接收下").findOne().click();
        sleep(1000);
    }
    if (text("店长店长，我可以喊多少人帮我盖楼？").exists()) {
        text("想喊多少喊多少").findOne().click();
        sleep(1000);
    }
    /*❌❌❌❌❌
    if (text("盖楼赢红包").exists()) {
        text("盖楼赢红包").findOne().click();
        var deng_duiwu = 10;
        for (deng_duiwu == 10; deng_duiwu > 0; deng_duiwu--) {
            toastLog("等待加载队伍\n（盖楼大挑战）……\n剩余" + deng_duiwu + "秒");
            sleep(1000);
        }

        if (text("返回").exists()) {
            text("返回").findOne().click();
            sleep(3000);
        } else {
            back();
            if (back() == false) {
                sleep(1000);
                back();
                if (back() == false) {
                    sleep(1000);
                    back();
                    if (back() == false) {
                        sleep(1000);
                        back();
                        if (back() == false) {
                            dialogs.alert("嘛耶。。。n竟然返回失败了……", "建议您重启手机再运行本脚本吧～");
                            engines.stopAllAndToast();
                        }
                    }
                }
            }
        }
    }
    */
    //❌sleep(2000);
    if (text("开心收下").exists()) {
        text("开心收下").findOne().click();
        sleep(1000);
    }

    if (text("翻倍领取").exists()) {
        text("翻倍领取").findOne().click();
        var deng_zhibo = 10;
        for (deng_zhibo == 10; deng_zhibo > 0; deng_zhibo--) {
            toastLog("点击翻倍领取会进入直播页\n请等待" + deng_zhibo + "秒");
        }
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }

    } else if (text("直接收下").exists()) {
        text("直接收下").findOne().click();
        sleep(1000);
    }
    if (text("店长店长，我可以喊多少人帮我盖楼？").exists()) {
        text("想喊多少喊多少").findOne().click();
        sleep(1000);
    }
    /*
    textContains("升级喵铺").waitFor()
    var O=textContains("升级喵铺").findOne().bounds()
    click(O.centerX(),O.centerY());
    */
    /*
    var deng_huodongjiemian = 5;
    for (deng_huodongjiemian == 5; deng_huodongjiemian > 0; deng_huodongjiemian--) {
        toastLog("(☉｡☉)!\n您现在在活动界面吗？\n如果没有则代表出问题了！\n\n如果您在活动页请稍等" + deng_huodongjiemian + "秒……");
        sleep(1000);
    }*/

    clickOshengji();

    function clickOshengji() {
        /*
        ❌❌❌❌❌❌
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            var deng_rightActivity = 10;
            for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
                toastLog("clickOshengji():\n检测不到正确的Activity\n等待" + deng_rightActivity + "秒后重新检测……\n请不要动手机！当前Activity\n" + currentActivity());
                sleep(2000);
            }
            if (currentActivity() == "com.taobao.browser.BrowserActivity") {
                toastLog("检测到正确的Activity,继续运行……");
            } else {
                dialogs.alert("(｡•́︿•̀｡)\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity() + "\n反馈时请截图此对话框！");
                engines.stopAllAndToast();
            }
        }*/


        if (text("升级喵铺").exists()) {
            text("升级喵铺").findOne().click();
            sleep(2000);
            if (text("去找喵币").exists()) {
                text("去找喵币").findOne().click();
                sleep(2000);
                if (text("签到").exists()) {
                    text("签到").findOne().click();
                    sleep(1600);
                    toast("签到成功")
                }
            } else {
                var jishi_8s = 8;
                for (jishi_8s == 8; jishi_8s > 0; jishi_8s--) {
                    sleep(1000);
                    toastLog("由于点击喵铺可能会升级\n因此您需要等" + jishi_8s + "秒");
                }

                if (text("开心收下").exists()) {
                    text("开心收下").findOne().click();
                    sleep(3000);
                    if (text("升级喵铺").exists()) {
                        text("升级喵铺").findOne().click();
                        sleep(3000);
                        if (text("去找喵币").exists()) {
                            text("去找喵币").findOne().click();
                            sleep(2000);
                            if (text("签到").exists()) {
                                text("签到").findOne().click();
                                sleep(1600);
                                toast("签到成功")
                            }
                        } else {
                            var jishi_8s = 8;
                            for (jishi_8s == 8; jishi_8s > 0; jishi_8s--) {
                                sleep(1000);
                                toastLog("由于点击喵铺可能会升级\n因此您需要等" + jishi_8s + "秒");
                            }
                            if (text("开心收下").exists()) {
                                text("开心收下").findOne().click();
                                sleep(3000);
                                if (text("升级喵铺").exists()) {
                                    text("升级喵铺").findOne().click();
                                    sleep(3000);

                                    if (text("去找喵币").exists()) {
                                        text("去找喵币").findOne().click();
                                        sleep(3000);
                                        if (text("签到").exists()) {
                                            text("签到").findOne().click();
                                            sleep(1600);
                                            toast("签到成功")
                                        }
                                    }
                                }
                            }

                        }


                    }
                    sleep(3000);
                    if (text("开心收下").exists()) {
                        text("开心收下").findOne().click();
                        sleep(3000);
                        clickOshengji();
                        sleep(2000);
                        if (text("开心收下").exists()) {
                            text("开心收下").findOne().click();
                            sleep(2000);
                            clickOshengji();
                        }
                    }
                }


                if (text("去找喵币").exists()) {
                    text("去找喵币").findOne().click();
                    sleep(2000);
                    if (text("签到").exists()) {
                        text("签到").findOne().click();
                        sleep(1600);
                        toast("签到成功")
                    }
                } else {
                    toastLog("找不到“去找喵币按钮”即将重找……*1")
                    sleep(2000);
                    if (text("去找喵币").exists()) {
                        sleep(2000);
                        text("去找喵币").findOne().click();
                        sleep(2000);
                        if (text("签到").exists()) {
                            text("签到").findOne().click();
                            sleep(1600);
                            toast("签到成功")
                        }
                    } else {
                        toastLog("找不到“去找喵币按钮”即将重找……*2")
                        sleep(2000);
                        if (text("去找喵币").exists()) {
                            sleep(2000);
                            text("去找喵币").findOne().click();
                            sleep(2000);
                            if (text("签到").exists()) {
                                text("签到").findOne().click();
                                sleep(1600);
                                toast("签到成功")
                            }
                        } else {
                            toastLog("找不到“去找喵币按钮”即将重找……*3")
                            sleep(2000);
                            if (text("去找喵币").exists()) {
                                sleep(2000);
                                text("去找喵币").findOne().click();
                                sleep(2000);
                                if (text("签到").exists()) {
                                    text("签到").findOne().click();
                                    sleep(1600);
                                    toast("签到成功")
                                }
                            }

                        }
                    }
                }
            }
        } else {
            toastLog("没有找到“升级喵铺”*1\n即将重找……");
            sleep(3000);
            if (text("升级喵铺").exists()) {
                text("升级喵铺").findOne().click();
                var jishi_8s = 8;
                for (jishi_8s == 8; jishi_8s > 0; jishi_8s--) {
                    sleep(1000);
                    toastLog("由于点击喵铺可能会升级\n因此您需要等" + jishi_8s + "秒");
                }
            } else {
                toastLog("没有找到“升级喵铺”*2\n即将重找……");
                sleep(3000);
                if (text("升级喵铺").exists()) {
                    text("升级喵铺").findOne().click();
                    var jishi_8s = 8;
                    for (jishi_8s == 8; jishi_8s > 0; jishi_8s--) {
                        sleep(1000);
                        toastLog("由于点击喵铺可能会升级\n因此您需要等" + jishi_8s + "秒");
                    }
                } else {
                    toastLog("没有找到“升级喵铺”*3\n即将重找……");
                    sleep(3000);
                    if (text("升级喵铺").exists()) {
                        text("升级喵铺").findOne().click();
                        var jishi_8s = 8;
                        for (jishi_8s == 8; jishi_8s > 0; jishi_8s--) {
                            sleep(1000);
                            toastLog("由于点击喵铺可能会升级\n因此您需要等" + jishi_8s + "秒");
                        }
                    } else {
                        toastLog("找了3遍了竟然还没找到……");
                        dialogs.alert("(⊙_◎)\n找不到“升级喵铺”按钮", "软件似乎在当前页面上找不到“升级喵铺”按钮，建议您重试一次或者重启手机再试试，还是不行请联系作者反馈吧……");
                        engines.stopAllAndToast();
                    }
                }
            }
        }
    } //从后面剪的

} //click_mp


function click_XX() {
    /*❌❌❌❌❌不再进行Activity检测
    if (currentActivity() == "com.taobao.browser.BrowserActivity") {
        toastLog("检测到正确的Activity,继续运行……");
    } else {
        var deng_rightActivity = 10;
        for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
            toastLog("click_XX():\n检测不到正确的Activity\n等待" + deng_rightActivity + "秒后重新检测……\n不要动手机！当前Activity\n" + currentActivity());
            sleep(2000);
        }
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            dialogs.alert("⊙﹏⊙\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity());
            engines.stopAllAndToast();
        }
    }*/


    if (text("x7000").exists()) {
        var XO = textContains("x7000").findOne().bounds();
        var x5 = XO.centerX() + 290;
        var y5 = XO.centerY() - 295;
        click(x5, y5);
    }
}

function click_quqiandao() {
    /*❌❌❌❌❌❌
    if (currentActivity() == "com.taobao.browser.BrowserActivity") {
        toastLog("检测到正确的Activity,继续运行……");
    } else {
        var deng_rightActivity = 10;
        for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
            toastLog("click_quqiandao():\n检测不到对的Activity\n等待" + deng_rightActivity + "秒后重新检测……\n不要动手机！当前Activity\n" + currentActivity());
            sleep(2000);
        }
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            dialogs.alert("(๑•﹏•)\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity());
            engines.stopAllAndToast();
        }
    }*/


    if (text("去签到").exists()) {
        text("去签到").findOne().click();
        var jishi_10s = 10;
        for (jishi_10s == 10; jishi_10s > 0; jishi_10s--) {
            toastLog("正在等待加载……" + "\n" + "剩余" + jishi_10s + "秒");
            sleep(1000);
        }
        if (text("兑换好礼（每天10:00上新）").exists()) {
            text("去完成 >").findOne().click();
            sleep(4000);
            if (text("签到").exists()) {
                text("签到").findOne().click();
            }
        }
        if (text("淘宝人生成就").exists()) {
            if (text("领取奖励").exists()) {
                text("领取奖励").findOne().click();
            } else {
                toastLog("找不到“领取奖励”按钮\n即将点击设定点\n如果点错了请停止运行脚本！");
                click(907, 1103);
            }
        }
        sleep(2000);
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }

    }
}

function click_qujindian() {
    /*
    if (currentActivity() == "com.taobao.browser.BrowserActivity") {
        toastLog("检测到正确的Activity,继续运行……");
    } else {
        var deng_rightActivity = 10;
        for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
            toastLog("click_qujindian():\n检测不到对的Activity\n等待" + deng_rightActivity + "秒后重新检测……\n不要动手机！当前Activity\n" + currentActivity());
            sleep(2000);
        }
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            dialogs.alert("(*﹏*;)\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity());
            engines.stopAllAndToast();
        }
    }*/

    while (text("去进店").exists()) {
        //要支持的动作
        toastLog("正在完成“去进店”任务……");
        text("去进店").findOne().click();
        sleep(2500);
        swipe(width / 2, height - 600, width / 2, 0, 500);
        sleep(3500);
        swipe(width / 2, height - 600, width / 2, 0, 500);
        sleep(10000);
        swipe(width / 2, height - 600, width / 2, 0, 500);
        sleep(9000);
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }

        sleep(1000);
        if (text("x7000").exists()) {
            var XO = textContains("x7000").findOne().bounds()
            var x5 = XO.centerX() + 290;
            var y5 = XO.centerY() - 295;
            click(x5, y5);
        }
        sleep(3000);
        click_mp();
        sleep(2000);

        times++;
        if (times > 60) {
            dialogs.alert("(~_~;)\n淘宝可能出现了BUG，请关闭淘宝后重新运行脚本吧～");
            toastLog("已停止运行脚本");
            exit()
        }
    }
}

function click_qujiaqun() {
    sleep(2000);
    /*
    if (currentActivity() == "com.taobao.browser.BrowserActivity") {
        toastLog("检测到正确的Activity,继续运行……");
    } else {
        var deng_rightActivity = 10;
        for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
            toastLog("click_qujiaqun():\n检测不到对的Activity\n等待" + deng_rightActivity + "秒后重新检测……\n不要动手机！当前Activity\n" + currentActivity());
            sleep(2000);
        }
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            dialogs.alert("(;;;・_・)\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity());
            engines.stopAllAndToast();
        }
    }*/
    while (text("去加群").exists()) {
        //要支持的动作
        toastLog("正在完成“去加群”任务……");
        text("去加群").findOne().click();
        sleep(3000);
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }

        sleep(1600);
        click_XX();
        sleep(3000);
        click_mp();
        sleep(3000);

        times++;
        if (times > 60) {
            dialogs.alert("(´-﹏-`；)\n淘宝可能出现了BUG，请关闭淘宝后重新运行脚本吧～");
            toastLog("已停止运行脚本");
            exit();
        }
    }
}

function click_quliulan2() {
    /*❌❌❌❌❌不再进行Activity检测
        if (currentActivity() == "com.taobao.browser.BrowserActivity") {
            toastLog("检测到正确的Activity,继续运行……");
        } else {
            var deng_rightActivity = 10;
            for (deng_rightActivity == 10; deng_rightActivity > 0; deng_rightActivity--) {
                toastLog("click_quliulan2():\n检测不到对的Activity\n等待" + deng_rightActivity + "秒后将重新检测……\n请不要动手机！当前Activity\n" + currentActivity());
                sleep(2000);
            }
            if (currentActivity() == "com.taobao.browser.BrowserActivity") {
                toastLog("检测到正确的Activity,继续运行……");
            } else {
                dialogs.alert("(˘･_･˘)\n检测不到正确的Activity", "这可能是由于误触导致的，在脚本运行时请不要进行任何操作\n\n您可以尝试重新运行一次，点击确定停止运行脚本！\n导致错误的Activity↓\n" + currentActivity());
                engines.stopAllAndToast();
            }
        }*/
    if (text("去浏览").exists()) {
        while (text("去浏览").exists()) {
            text("去浏览").findOne().click();
            sleep(5000);
            toastLog("当前为浏览15秒的页面");
            sleep(4000);
            swipe(width / 2, height - 500, width / 2, 0, 500);
            sleep(2500);
            swipe(width / 2, height - 500, width / 2, 0, 500);
            sleep(2500);
            swipe(width / 2, height - 500, width / 2, 0, 500);
            sleep(2500);
            swipe(width / 2, height - 500, width / 2, 0, 500);
            sleep(10000);
            swipe(width / 2, height - 500, width / 2, 0, 500);
            sleep(1000); //这个地方如果网络不好，自己加时间(单位是毫秒)，1000毫秒为1秒   

            //💛💛💛💛💛❣️❣️❣️❣️
            if (currentActivity() == "com.taobao.tao.TBMainActivity") {
                app.startActivity({
                    packageName: "com.taobao.taobao",
                    className: "com.taobao.search.searchdoor.SearchDoorActivity"
                });
                toastLog("若长时间没有打开淘宝\n请自行打开淘宝至搜索界面！");
                waitForActivity("com.taobao.search.searchdoor.SearchDoorActivity");
                sleep(1000);
                setText("双十一合伙人");
                if (text("搜索").exists()) {
                    text("搜索").findOne().click();
                }
                jinhuodong();
                click_mp();
            } else {
                //💝💝💝💝💝使用用户设定的返回方法
                if (context_i_back == 0) {
                    sleep(1000);
                    toastLog("使用普通的返回");
                    back();
                    sleep(2000);
                }
                if (context_i_back == 1) {
                    sleep(1000);
                    toastLog("使用ROOT返回\n请确保已给ROOT权限！");
                    Back();
                    sleep(2000);
                }
                if (context_i_back == 2) {
                    sleep(1000);
                    toastLog("从屏幕中间向从左向内滑动来返回");
                    gestures([context_gestures_speed, [0, height / 2],
                        [500, height / 2]
                    ]);
                    sleep(2000);
                }
                if (context_i_back == 4) {
                    sleep(1000);
                    toastLog("从屏幕左侧下方向上滑动来返回");
                    gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                        [width / 2 - 300, height - 500]
                    ]);
                    sleep(2000);
                }
                if (context_i_back == 3) {
                    sleep(1000);
                    toastLog("从屏幕中间向从右向内滑动来返回");
                    gestures([context_gestures_speed, [width - 1, height / 2],
                        [width - 500, height / 2]
                    ]);
                    sleep(2000);
                }
                if (context_i_back == 5) {
                    sleep(1000);
                    toastLog("从屏幕左侧下面向上面滑动来返回");
                    gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                        [width / 2 + 300, height - 500]
                    ]);
                    sleep(2000);
                }
                sleep(2000);
            }
        }
    }
}

function click_quchakan() {
    sleep(1000);
    if (text("去查看").exists()) {
        text("去查看").findOne().click();
        sleep(3000);
        //💝💝💝💝💝使用用户设定的返回方法
        if (context_i_back == 0) {
            sleep(1000);
            toastLog("使用普通的返回");
            back();
            sleep(2000);
        }
        if (context_i_back == 1) {
            sleep(1000);
            toastLog("使用ROOT返回\n请确保已给ROOT权限！");
            Back();
            sleep(2000);
        }
        if (context_i_back == 2) {
            sleep(1000);
            toastLog("从屏幕中间向从左向内滑动来返回");
            gestures([context_gestures_speed, [0, height / 2],
                [500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 4) {
            sleep(1000);
            toastLog("从屏幕左侧下方向上滑动来返回");
            gestures([context_gestures_speed, [width / 2 - 300, height - 1],
                [width / 2 - 300, height - 500]
            ]);
            sleep(2000);
        }
        if (context_i_back == 3) {
            sleep(1000);
            toastLog("从屏幕中间向从右向内滑动来返回");
            gestures([context_gestures_speed, [width - 1, height / 2],
                [width - 500, height / 2]
            ]);
            sleep(2000);
        }
        if (context_i_back == 5) {
            sleep(1000);
            toastLog("从屏幕左侧下面向上面滑动来返回");
            gestures([context_gestures_speed, [width / 2 + 300, height - 1],
                [width / 2 + 300, height - 500]
            ]);
            sleep(2000);
        }
        //返回完成✅
        sleep(2000);
    }
}

//❌❌❌❌❌StopTB();
openTBandsearch();
jinhuodong();
var loop = 1;
var times = 1;
for (loop == 1; loop <= 5; loop++) {
    click_mp();
    click_quliulan2();
    click_quchakan();
    click_qujindian();
    click_quqiandao();
    click_qujiaqun();
    click_XX();
    sleep(3000);
    toastLog("已完成检测并循环" + loop + "次")
}

dialogs.alert("✔️脚本已运行完毕", "似乎已完成了任务，已检测不到\n“去签到”“去进店”“去浏览”“去加群”\n如有遗漏请自行操作或再次运行\n\n脚本作者@橘衫下邂逅的时光");
exit()
